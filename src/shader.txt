struct VertexInput {
    @location(0) position: vec2<f32>,
    @location(1) instance_position: vec2<f32>,
};

struct VertexOutput {
    @builtin(position) position: vec4<f32>,
    @location(0) color: vec3<f32>,
};

struct CameraUniform {
    view_matrix: mat4x4<f32>,
};
@group(0) @binding(0) var<uniform> camera: CameraUniform;

@vertex
fn vs_main(in: VertexInput) -> VertexOutput {
    let pos = in.position + in.instance_position;
    let transformed_pos = camera.view_matrix * vec4<f32>(pos, 0.0, 1.0);
    
    var output: VertexOutput;
    output.position = transformed_pos;
    output.color = vec3<f32>(1.0, 1.0, 0.5);
    return output;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    return vec4<f32>(in.color, 1.0);
}